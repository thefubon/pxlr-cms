#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

const BACKEND_CONTENT = path.join(__dirname, '../backend/content');
const FRONTEND_CONTENT = path.join(__dirname, '../frontend/content');

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –º–µ–∂–¥—É backend –∏ frontend
 */
function syncContent() {
  console.log('üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞...');
  
  try {
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É content –≤–æ frontend –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!fs.existsSync(FRONTEND_CONTENT)) {
      fs.mkdirSync(FRONTEND_CONTENT, { recursive: true });
      console.log('üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ frontend/content/');
    }

    // –ß–∏—Ç–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ backend/content
    const backendFiles = fs.readdirSync(BACKEND_CONTENT);
    const mdxFiles = backendFiles.filter(file => file.endsWith('.mdx'));
    
    console.log(`üìù –ù–∞–π–¥–µ–Ω–æ ${mdxFiles.length} MDX —Ñ–∞–π–ª–æ–≤ –≤ backend/content/`);

    // –ö–æ–ø–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    let syncedCount = 0;
    let skippedCount = 0;

    mdxFiles.forEach(file => {
      const sourcePath = path.join(BACKEND_CONTENT, file);
      const targetPath = path.join(FRONTEND_CONTENT, file);
      
      const sourceStats = fs.statSync(sourcePath);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª
      let shouldCopy = true;
      
      if (fs.existsSync(targetPath)) {
        const targetStats = fs.statSync(targetPath);
        
        // –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤ backend –Ω–æ–≤–µ–µ
        if (sourceStats.mtime <= targetStats.mtime) {
          shouldCopy = false;
          skippedCount++;
        }
      }
      
      if (shouldCopy) {
        fs.copyFileSync(sourcePath, targetPath);
        console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω: ${file}`);
        syncedCount++;
      } else {
        console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω (–Ω–µ –∏–∑–º–µ–Ω–µ–Ω): ${file}`);
      }
    });

    // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –∏–∑ frontend, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ backend
    const frontendFiles = fs.existsSync(FRONTEND_CONTENT) 
      ? fs.readdirSync(FRONTEND_CONTENT).filter(file => file.endsWith('.mdx'))
      : [];
    
    let deletedCount = 0;
    frontendFiles.forEach(file => {
      if (!mdxFiles.includes(file)) {
        const filePath = path.join(FRONTEND_CONTENT, file);
        fs.unlinkSync(filePath);
        console.log(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω (–Ω–µ—Ç –≤ backend): ${file}`);
        deletedCount++;
      }
    });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:');
    console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${syncedCount} —Ñ–∞–π–ª–æ–≤`);
    console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount} —Ñ–∞–π–ª–æ–≤`);
    console.log(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ: ${deletedCount} —Ñ–∞–π–ª–æ–≤`);
    console.log(`üìù –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${mdxFiles.length}`);
    
    console.log('\nüéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error.message);
    process.exit(1);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
function watchContent() {
  console.log('üëÄ –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ backend/content...');
  console.log('üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n');
  
  fs.watch(BACKEND_CONTENT, { recursive: false }, (eventType, filename) => {
    if (filename && filename.endsWith('.mdx')) {
      console.log(`üîî –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: ${filename} (${eventType})`);
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞
      setTimeout(() => {
        syncContent();
        console.log('üëÄ –ü—Ä–æ–¥–æ–ª–∂–∞—é –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ...\n');
      }, 100);
    }
  });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);

if (args.includes('--watch') || args.includes('-w')) {
  // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
  syncContent();
  console.log('');
  
  // –ó–∞—Ç–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ
  watchContent();
} else {
  // –¢–æ–ª—å–∫–æ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
  syncContent();
} 