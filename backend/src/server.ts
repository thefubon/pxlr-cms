import Fastify from 'fastify';
import cors from '@fastify/cors';
import staticFiles from '@fastify/static';
import * as path from 'path';
import postsRoutes from './routes/posts';
import settingsRoutes from './routes/settings';

const fastify = Fastify({ 
  logger: true 
});

const PORT = process.env.PORT ? parseInt(process.env.PORT) : 3333;
const HOST = process.env.HOST || '0.0.0.0';

async function start() {
  try {
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º CORS
    await fastify.register(cors, {
      origin: [
        'http://localhost:3000', // Next.js frontend
        'http://localhost:5173', // Vite admin
      ],
      credentials: true,
    });

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (–¥–ª—è content)
    await fastify.register(staticFiles, {
      root: path.join(__dirname, '..', 'content'),
      prefix: '/content/',
    });

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç—ã –¥–ª—è API
    await fastify.register(postsRoutes, { prefix: '/api' });
    await fastify.register(settingsRoutes);

    // Health check
    fastify.get('/health', async (request, reply) => {
      return { status: 'ok', timestamp: new Date().toISOString() };
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    fastify.setErrorHandler((error, request, reply) => {
      fastify.log.error(error);
      
      if (error.validation) {
        reply.status(400).send({
          error: 'Validation Error',
          message: error.message,
          details: error.validation,
        });
        return;
      }
      
      reply.status(500).send({
        error: 'Internal Server Error',
        message: error.message,
      });
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    await fastify.listen({ port: PORT, host: HOST });
    
    console.log(`üöÄ Backend server running on http://${HOST}:${PORT}`);
    console.log(`üìù API available at http://${HOST}:${PORT}/api`);
    console.log(`üìÅ Content available at http://${HOST}:${PORT}/content`);
    
  } catch (err) {
    fastify.log.error(err);
    process.exit(1);
  }
}

// Graceful shutdown
process.on('SIGINT', async () => {
  try {
    await fastify.close();
    console.log('‚úÖ Server closed gracefully');
    process.exit(0);
  } catch (err) {
    console.error('‚ùå Error during shutdown:', err);
    process.exit(1);
  }
});

start(); 